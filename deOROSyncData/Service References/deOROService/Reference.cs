//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace deOROSyncData.deOROService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="deOROService.ISyncDataService")]
    public interface ISyncDataService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncDataService/UploadData", ReplyAction="http://tempuri.org/ISyncDataService/UploadDataResponse")]
        void UploadData(int customerId, int locationId, System.Data.DataSet data, bool usersSharedAcrossLocations);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncDataService/UploadData", ReplyAction="http://tempuri.org/ISyncDataService/UploadDataResponse")]
        System.Threading.Tasks.Task UploadDataAsync(int customerId, int locationId, System.Data.DataSet data, bool usersSharedAcrossLocations);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncDataService/DownloadData", ReplyAction="http://tempuri.org/ISyncDataService/DownloadDataResponse")]
        System.Data.DataSet DownloadData(int customerId, int locationId, bool usersSharedAcrossLocations);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncDataService/DownloadData", ReplyAction="http://tempuri.org/ISyncDataService/DownloadDataResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> DownloadDataAsync(int customerId, int locationId, bool usersSharedAcrossLocations);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncDataService/GetScheduleAndItemsQuantityInfo", ReplyAction="http://tempuri.org/ISyncDataService/GetScheduleAndItemsQuantityInfoResponse")]
        System.Data.DataSet GetScheduleAndItemsQuantityInfo(int customerId, int locationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncDataService/GetScheduleAndItemsQuantityInfo", ReplyAction="http://tempuri.org/ISyncDataService/GetScheduleAndItemsQuantityInfoResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetScheduleAndItemsQuantityInfoAsync(int customerId, int locationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncDataService/UpdateScheduledStatus", ReplyAction="http://tempuri.org/ISyncDataService/UpdateScheduledStatusResponse")]
        void UpdateScheduledStatus(int customerId, int locationId, System.Data.DataSet ds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncDataService/UpdateScheduledStatus", ReplyAction="http://tempuri.org/ISyncDataService/UpdateScheduledStatusResponse")]
        System.Threading.Tasks.Task UpdateScheduledStatusAsync(int customerId, int locationId, System.Data.DataSet ds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncDataService/TestService", ReplyAction="http://tempuri.org/ISyncDataService/TestServiceResponse")]
        bool TestService(int customerId, int locationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncDataService/TestService", ReplyAction="http://tempuri.org/ISyncDataService/TestServiceResponse")]
        System.Threading.Tasks.Task<bool> TestServiceAsync(int customerId, int locationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncDataService/AdjustUnevenBalances", ReplyAction="http://tempuri.org/ISyncDataService/AdjustUnevenBalancesResponse")]
        int AdjustUnevenBalances(int customerId, int locationId, bool usersSharedAcrossLocations);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncDataService/AdjustUnevenBalances", ReplyAction="http://tempuri.org/ISyncDataService/AdjustUnevenBalancesResponse")]
        System.Threading.Tasks.Task<int> AdjustUnevenBalancesAsync(int customerId, int locationId, bool usersSharedAcrossLocations);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISyncDataServiceChannel : deOROSyncData.deOROService.ISyncDataService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SyncDataServiceClient : System.ServiceModel.ClientBase<deOROSyncData.deOROService.ISyncDataService>, deOROSyncData.deOROService.ISyncDataService {
        
        public SyncDataServiceClient() {
        }
        
        public SyncDataServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SyncDataServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SyncDataServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SyncDataServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void UploadData(int customerId, int locationId, System.Data.DataSet data, bool usersSharedAcrossLocations) {
            base.Channel.UploadData(customerId, locationId, data, usersSharedAcrossLocations);
        }
        
        public System.Threading.Tasks.Task UploadDataAsync(int customerId, int locationId, System.Data.DataSet data, bool usersSharedAcrossLocations) {
            return base.Channel.UploadDataAsync(customerId, locationId, data, usersSharedAcrossLocations);
        }
        
        public System.Data.DataSet DownloadData(int customerId, int locationId, bool usersSharedAcrossLocations) {
            return base.Channel.DownloadData(customerId, locationId, usersSharedAcrossLocations);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> DownloadDataAsync(int customerId, int locationId, bool usersSharedAcrossLocations) {
            return base.Channel.DownloadDataAsync(customerId, locationId, usersSharedAcrossLocations);
        }
        
        public System.Data.DataSet GetScheduleAndItemsQuantityInfo(int customerId, int locationId) {
            return base.Channel.GetScheduleAndItemsQuantityInfo(customerId, locationId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetScheduleAndItemsQuantityInfoAsync(int customerId, int locationId) {
            return base.Channel.GetScheduleAndItemsQuantityInfoAsync(customerId, locationId);
        }
        
        public void UpdateScheduledStatus(int customerId, int locationId, System.Data.DataSet ds) {
            base.Channel.UpdateScheduledStatus(customerId, locationId, ds);
        }
        
        public System.Threading.Tasks.Task UpdateScheduledStatusAsync(int customerId, int locationId, System.Data.DataSet ds) {
            return base.Channel.UpdateScheduledStatusAsync(customerId, locationId, ds);
        }
        
        public bool TestService(int customerId, int locationId) {
            return base.Channel.TestService(customerId, locationId);
        }
        
        public System.Threading.Tasks.Task<bool> TestServiceAsync(int customerId, int locationId) {
            return base.Channel.TestServiceAsync(customerId, locationId);
        }
        
        public int AdjustUnevenBalances(int customerId, int locationId, bool usersSharedAcrossLocations) {
            return base.Channel.AdjustUnevenBalances(customerId, locationId, usersSharedAcrossLocations);
        }
        
        public System.Threading.Tasks.Task<int> AdjustUnevenBalancesAsync(int customerId, int locationId, bool usersSharedAcrossLocations) {
            return base.Channel.AdjustUnevenBalancesAsync(customerId, locationId, usersSharedAcrossLocations);
        }
    }
}
